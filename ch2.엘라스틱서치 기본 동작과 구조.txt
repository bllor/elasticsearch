Ch02. 엘라스틱서치 기본동작과 구조

2.1 엘라스틱서치 기본 동작 빠르게 둘러보기

2.1.1 문서 색인
[1]_id를 지정하여 색인
put [인덱스 이름]/_doc/[_id값] 
-> 해당 id를 가지는 문서를 저장할 수 있다.
-> 여기서 _doc는 엘라스틱서치의 타입자리였지만, 현재는 타입을 사용하지 않고 기본값인 _doc를 사용한다.

[2]_id를 지정하지 않은 색인
*색인 : 데이터가 검색될 수 있는 구조로 변경하기 위해 원본 문서를 검색어 토글들로 변환하여 저장하는 일련의 과정
*인덱스 : 색인된 데이터가 저장되는 저장소.
id를 별도로 지정하지 않을 때는 post메서드를 사용한다.
post [인덱스이름]/_doc -> 자동으로 id가 생성된다.

2.1.2 문서 조회
문서를 조회할 대는 인덱스 이름과 _id 값을 지정하여 get메서드로 호출한다.
get [인덱스_이름]/_doc/[_id값]


2.1.3 문서 업데이트
문서를 업데이트할 댄느 인덱스 이름과 _id값을 지정한다.
요청 본문에는 부분 업데이트할 내용을 doc필드 안에 지정하고, API는 _doc 대신 _update를 사용한다.
post [인덱스_이름]/_update/[_id값]

2.1.4 문서검색
get [인덱스_이름]/_search
post[인덱스_이름]/_search

검색을 할 경우, _score에서 유사도 점수를 확인할 수 있다.

*
엘라스틱은 검색 API의 동작 성격이 GET메서드와 더어울린다고 판단했지만, 예전 HTTP 표준에서는 사실상 이러한 요청을 허용하지 않았었다.

2.1.5 문서 삭제
DELETE [인덱스_이름]/_doc/[_id값]

2.2 엘라스틱서치 구조 개괄
[1]문서(document)
엘라스틱서치가 저장하고 색인을 생성하는 json문서
[2]인덱스 
문서를 모아 놓은 단위
클라이언트는 이 인덱스단위로 엘라스틱서치에 검색을 요청하게 된다.
[3]샤드
루씬의 단일 검색 인스턴스
인덱스는 기본적으로 샤드라는 단위로 분리되고 각 노드에 분산되어 저장이 된다.
엘라스틱서치는 고가용성을 제동하기 위해 샤드의 내용을 복제해 두는데, 원본역할을 담당하는 샤드를 주샤드(primary shard)라고 한다.
복제본은 복제본샤드(replication shard)라고 한다.
[4]_id
인덱스 내 문서에 부여되는 고유한 구분자
[5]타입
엘라스틱서치는 과거에 하나의 인덱스 안에 여러 문서를 묶어서 타입이라는 논리단위로 나누었지만,
지금은 문서의 묶음을 논리적으로 구분해야 할 피룡가 있다면 별도의 인덱스로 독립시켜야 한다.
현재는 타입이 들어가야할 자리에는 기본값인_doc가 들어가 있다.
[6]노드
엘라스틱서치 프로세스 하나가 노드 하나를 구성하고, 엘라스틱 서치 노드 하나는 여러 개의 샤드를 가진다.
노드의 역할
-데이터 노드 : 샤드를 보유하고 샤드에 실제 읽기와 쓰기 작업을 수행하는 노드
-마스터 노드 : 클러스터를 관리하는 노드
-조정 노드    : 클라이언트의 요청을 받아서 데이터 노드에 요청을 분배하고 클라이언트에게 응답을 돌려주는 노드
[7]클러스터
엘라스틱서치 노드 여러 개가 모여 하나의 클러스터를 구성한다.

2.3 엘라스틱서치 내부 구조와 루씬
엘라스틱서치는 아파치 루씬을 코어 라이브러리로 사용한다.
루씬은 문서를 색인하고 검색하는 라이브러리이다.
루씬의 동작 특성을 알아보고 엘라스틱서치가 이 루씬을 어떻게 이용하는지 보자.

2.3.1 루씬 flush
문서 색인 요청이 들어오면 루씬은 문서를 분석해서 역색인을 생성한다.
최초 생성 자체는 메모리 버퍼에 들어가고, 문서 색인, 업데이트, 삭제 등의 작업이 수행되면
루씬은 이러한 변경들을 메모리에 들고 있다가 주기적으로 디스크에 flush한다.

루씬은 색인한 정보를 파일로 저장하지 때문에 루씬에서 검색을 하려면 먼저 파일을 열어야한다.
루씬은 파일을 연 시점에 색인이 완료된 문서만 검색할 수 있다.
색인에 변경사항이 발생했고, 검색 결과에 반영하고 싶다면 파일을 새로 열어야 한다.
엘라스틱서치는 내부적으로 루씬의 directoryReader라는 클래스를 이용하여 파일을 열고,
루씬의 색인에 접근할 수 있는 IndexReader 객체를 얻는다.
엘라스틱서치는 변경 내용을 검색에 반영하기 위해 루씬의 DirectoryReader.openIfChanged를 호출해 변경 사항이 적용된
새 IndexReader를 열어 준 뒤 기존 IndexReader를 안전하게 닫는다. 이러한 작업을 엘라스틱서치에서는 refresh라고 한다.
refresh는 어느 정도 비용이 있는 작업이기 때문에 엘라스틱서치는 색인이 변경될 때 마다 refresh를 하는 것이 아닌
일정주기마다 진행한다.

2.3.2 루씬 commit
루씬의 flush는 시스템의 페이지 캐시가 데이터를 넘겨주는 것까지만 보장할 뿐 디스크에 파일이 실제로 안전하게 기록되는 것을 보장하지 않는데,
루씬의 fsync를 사용하여 주기적으로 커널 시스템의 페이지 캐시의 내용과 실제로 디스크에 기록된 내용의 싱크를 맞추는 작업을 진행하는데,
이것을 루씬 commit이라고 한다.

엘라스틱서치의 flush작업은 내부적으로 이 루씬commit을 거친다.
엘라스틱서치의 flush작업은 refresh보다 더 많은 비용이 발생한다.

2.3.3 세그먼트
앞의 작업을 거쳐 디스크에 기록된 파일들이 모이면 세그먼트라는 단위가 된다.
이 세그먼트가 루씬의 검색 대상이다.
루씬은 세그먼트를 중간중간 적당히 병합을 수행한다.
세그먼트 병합은 비싼 작업이지만 일단 병합하고 나면 검색 성능의 향상을 기대할 수 있다.

2.3.4 루씬 인덱스와 엘라스틱서치 인덱스
여러 세그먼트가 모이면 루씬 인덱스가 되고, 루씬은 이 인덱스 내에서만 검색이 가능하다.
엘라스틱서치 샤드는 이 루씬 인덱스 하나를 래핑한 단위이다.
엘라스틱서치 샤드가 여러 개가 모이면 엘라스틱서치 인덱스가 된다.
엘라스틱서치 인덱스가 되면 여러 샤드에 있는 문서를 모두 검색할 수 있다.
새 문서가 들어오면 해당 내용을 라우팅하여 여러 샤드에 분산시켜 저장, 색인한다.
이후 클라이언트가 엘라스틱서치에 검색 요청을 보내면 엘라스틱서치는 해당하는 각 샤드를 대상으로 검색을 한 뒤 그 결과를 모아 병합하여 최종응답을 만든다.

2.3.5 translog
엘라스틱서치에 색인된 문서들은 루씬 commit가지 완료되어야 디스크에 안전하게 기록되는데, commit중 에러가 발생하여 데이터를 유실할 수 있으니,
translog라는 이름의 작업 로그를 남긴다.

-----
[1]문서 정보를 분석하여 역색인을 만든 후, 메모리 버퍼에 보관
[2]엘라스틱서치refresh를 통해 데이터를 세그먼트 형태로 변환
[3]엘라스틱서치flush를 통해 데이터 commit -> 해당 세그먼트는 검색이 가능
[4]여러 세그먼트가 모이면 루씬 인덱스가 되고, 그 루씬 인덱스를 래핑한 것이 엘라스틱서치 샤드
[5]여러 개의 엘라스틱서치 샤드가 모여, 엘라스틱서치 인덱스가 된다.